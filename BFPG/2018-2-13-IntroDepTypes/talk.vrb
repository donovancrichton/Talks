\frametitle{Constraints as Types}
\begin{itemize}
\item Program constraints can be lifted to the type level, through the use of
  functions as types.
\item This causes the type checker to act as a kind of proof checker! It is no
  coincidence that the early dependently typed languages were focused on
  theorem proving!
\item Complexity can be added to the program types as required, in a kind of
  pay-as-you-go approach.
\item You're paying in verbosity! Type-level functions are required to be total
  in Idris, which means they must be defined for \textit{every} possible case.
\item You're also paying in design complexity, the more elbarate the type
  computation, the more difficult it is to reason about the types involved.
\item Still worth it though!
\end{itemize}


